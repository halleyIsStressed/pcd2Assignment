#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#pragma warning (disable:4996)
#define MAX_STAFF_INFORMATION 10
struct StaffInformation {
    char name[30];
    char address[50];
    char phoneNumber[12];
    char email[30];
    char position[20];
};

struct Duty {
    char week[7][20];
    char work[7][5][70];  // Assuming you need 4 work slots per day, with up to 70 characters each
};

struct Staff {
    char staffID[10];
    char staffPassword[20];
    struct StaffInformation information;
    struct Duty dutyScadule;
};


void logINpageStaff();
void signUpStaffFunction();
void logInStaffFunction();
void staffPage(struct Staff staffInformation);
void modifyStaff();
void duty(struct Staff dutyShow);
void leaveFunction(struct Staff applyLeave);
void applyResign();
void searchStaff();
void decoration();
void decorationFlower();
void title();
void line();
void clearInputBuffer();

int main() {
    int select;
    char abort;
    do {
        title();
        printf("%s", "1)Staff\n");
        printf("%s", "6)Exit\n");
        printf("%s", "Please select >>");
        scanf("%d", &select);
        clearInputBuffer();
        if (select == 1) {
            system("cls");  // system("clear"); for Linux
            logINpageStaff();
        }
        else if (select = 6) {
            exit(-1);
        }
        system("cls");
        do {
            printf("If you want to exit the system, please enter 'X'.\nIf you want to go back to the main page, please enter 'R'.\n");
            printf("Please select >> ");
            scanf("%c", &abort);
            clearInputBuffer();
            system("cls");
        } while (toupper(abort) != 'X' && toupper(abort) != 'R');



    } while (toupper(abort) != 'X');

    return 0;
}

void clearInputBuffer() {
    while (getchar() != '\n');
}

void logINpageStaff() {
    char option;
    do {
        title();
        printf("\n%43s", "Welcome staff to use this system, are you a new employee?\nIf yes please enter 'Y', if No 'N': ");
        scanf(" %c", &option);
        clearInputBuffer();
        if (toupper(option) == 'Y') {
            system("cls");
            signUpStaffFunction();
        }
        else if (toupper(option) == 'N') {
            system("cls");
            logInStaffFunction();
        }
        else {
            printf("Invalid input. Please enter 'Y' for Yes or 'N' for No.\n");
        }
    } while (toupper(option) != 'N' && toupper(option) != 'Y');
}

void signUpStaffFunction() {
    FILE* signUP = fopen("Staff.bin", "ab");  // Append mode is used to keep adding new records.
    if (signUP == NULL) {
        perror("Error opening file");
        return;
    }
    int position;
    struct Staff staffInformation;
    title();
    decorationFlower();
    printf("");
    printf("\n%s", "New login ID: ");
    scanf("%s", staffInformation.staffID);  // Ensures buffer does not overflow, leaves space for null terminator
    clearInputBuffer();
    printf("\n%s", "New Password: ");
    scanf("%s", staffInformation.staffPassword);
    clearInputBuffer();
    decorationFlower();
    printf("\n%s", "Name: ");
    scanf(" %[^\n]", staffInformation.information.name);
    clearInputBuffer();
    printf("\n%s", "Email: ");
    scanf(" %s", &staffInformation.information.email);
    clearInputBuffer();
    printf("\n%s", "New Phone Number: ");
    scanf("%11s", staffInformation.information.phoneNumber);
    clearInputBuffer();
    printf("\n%s", "Current Home Address: ");
    scanf(" %[^\n]", staffInformation.information.address);
    clearInputBuffer();
    printf("-------------------------------------------------------------\n");
    printf("\n|Position: |1) ENGINEER\t|2) COUNTER ATTENDANT\t| 3)MANAGER|\n");
    printf("-------------------------------------------------------------\n");
    printf("\n%s", "Please select >>");
    scanf(" %d", &position);
    clearInputBuffer();
    switch (position)
    {
    case 1: {
        strcpy(staffInformation.information.position, "ENGINEER");
        break;
    }
    case 2: {
        strcpy(staffInformation.information.position, "COUNTER ATTENDANT");
        break;
    }
    case 3: {
        strcpy(staffInformation.information.position, "MANAGER");
        break;
    }
    default:
        break;
    }

    // Writes the staff information to the file.
    const char* daysOfWeek[7] = { "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY" };

    if (strcmp(staffInformation.information.position, "ENGINEER") == 0) {
        // Task descriptions for weekdays
        const char* weekTasks[5][5] = {
      {"Check Train A", "Safety Inspection", "Equipment Checks", "Paperwork", "Control Systems Check"},
      {"Check Train B", "Maintenance Engine", "Breaks", "Signal Testing", "Hydraulic Systems Check"},
      {"Check Train C", "Review Train Schedules", "Breaks", "Business Premises", "Operational Review"},
      {"Check Train D", "Emergency Drills", "Breaks", "Business Premises", "Safety Protocol Review"},
      {"Check Train E", "Project Meeting", "Breaks", "Train Cleaning", "Budget Review"}
        };

        const char* restDay = "Rest Day";

        for (int day = 0; day < 7; day++) {
            // Set the day of the week
            strcpy(staffInformation.dutyScadule.week[day], daysOfWeek[day]);

            const char* restDay = "Rest Day";

            // For weekends
            if (day == 0 || day == 6) {
                for (int task = 0; task < 5; task++) {
                    strcpy(staffInformation.dutyScadule.work[day][task], restDay);
                }
            }
            else {
                // For weekdays, fetch tasks from the weekTasks array
                int taskIndex = day - 1;  // Adjust for array index starting at 0
                for (int task = 0; task < 5; task++) {
                    strcpy(staffInformation.dutyScadule.work[day][task], weekTasks[taskIndex][task]);
                }
            }
        }
    }

    else if (strcmp(staffInformation.information.position, "COUNTER ATTENDANT") == 0) {

        const char* weekTasks[5][5] = {
     {"Ticket Checking", "Information Desk", "Lunch Break", "Schedule Coordination", "Ticket Validation"},
     {"Platform Management", "Announcements", "Lunch Break", "Customer Service", "Train Dispatching"},
     {"Ticket Selling", "Luggage Assistance", "Lunch Break", "Lost and Found", "Baggage Check"},
     {"Sanitation Check", "Break", "Lunch Break", "Customer Assistance", "Platform Inspection"},
     {"Equipment Maintenance", "Security Check", "Lunch Break", "Reporting", "Safety Compliance"}
        };

        const char* restDay = "Rest Day";

        for (int day = 0; day < 7; day++) {
            // Set the day of the week
            strcpy(staffInformation.dutyScadule.week[day], daysOfWeek[day]);

            const char* restDay = "Rest Day";

            // For weekends
            if (day == 0 || day == 6) {
                for (int task = 0; task < 5; task++) {
                    strcpy(staffInformation.dutyScadule.work[day][task], restDay);
                }
            }
            else {
                // For weekdays, fetch tasks from the weekTasks array
                int taskIndex = day - 1;  // Adjust for array index starting at 0
                for (int task = 0; task < 5; task++) {
                    strcpy(staffInformation.dutyScadule.work[day][task], weekTasks[taskIndex][task]);
                }
            }
        }
    }

    else if (strcmp(staffInformation.information.position, "MANAGER") == 0) {
        // Define tasks for a MANAGER for 5 workdays
        const char* weekTasks[5][5] = {
    {"Team Meeting", "Project Review", "Lunch Break", "Client Call", "Documentation"},
    {"Budget Planning", "Team 1-on-1s", "Lunch Break", "Strategy Session", "Review Reports"},
    {"Report Analysis", "Staff Training", "Lunch Break", "Market Research", "Compliance Check"},
    {"Operational Review", "Problem Solving", "Lunch Break", "Networking Event", "Client Feedback"},
    {"Business Development", "Email Correspondence", "Lunch Break", "Plan Next Week", "Market Analysis"}
        };

        const char* restDay = "\t Rest Day \t";
        for (int day = 0; day < 7; day++) {
            // Set the day of the week
            strcpy(staffInformation.dutyScadule.week[day], daysOfWeek[day]);

            const char* restDay = "Rest Day";

            // For weekends
            if (day == 0 || day == 6) {
                for (int task = 0; task < 5; task++) {
                    strcpy(staffInformation.dutyScadule.work[day][task], restDay);
                }
            }
            else {
                // For weekdays, fetch tasks from the weekTasks array
                int taskIndex = day - 1;  // Adjust for array index starting at 0
                for (int task = 0; task < 5; task++) {
                    strcpy(staffInformation.dutyScadule.work[day][task], weekTasks[taskIndex][task]);
                }
            }
        }
    }
    fwrite(&staffInformation, sizeof(struct Staff), 1, signUP);
    fclose(signUP);
}

void logInStaffFunction() {
    FILE* logIn = fopen("Staff.bin", "rb");
    if (logIn == NULL) {
        perror("Error opening file");
        return;
    }
    struct Staff staffCheckingInformation[MAX_STAFF_INFORMATION];
    char password[20], ID[10];
    int loginSuccessful = 0, i = 0;

    while (i < MAX_STAFF_INFORMATION && fread(&staffCheckingInformation[i], sizeof(struct Staff), 1, logIn) == 1) {
        i++;
    }
    int read = i; // Number of records read
    fclose(logIn);

    do {
        title();
        decorationFlower();
        printf("\nLOG IN (ID): ");
        rewind(stdin);
        scanf("%s", ID);
        printf("\nPassword   : ");
        rewind(stdin);
        scanf("%s", password);

        for (i = 0; i < read; i++) {
            if (strcmp(ID, staffCheckingInformation[i].staffID) == 0 && strcmp(password, staffCheckingInformation[i].staffPassword) == 0) {
                loginSuccessful = 1;
                staffPage(staffCheckingInformation[i]);
                break; // Exit the loop once login is successful
            }
        }

        if (!loginSuccessful) {
            printf("Invalid ID or password. Please try again.\n");
        }
    } while (!loginSuccessful);
}

void staffPage(struct Staff staffInformation) {
    int selectF;
    system("cls");
    title();
    printf("Name : %s\n", staffInformation.information.name);
    printf("Address : %s\n", staffInformation.information.address);
    printf("Phone Number : %s\n", staffInformation.information.phoneNumber);
    printf("Email : %s\n", staffInformation.information.email);
    printf("Position : %s\n", staffInformation.information.position);
    decorationFlower();
    if (strcmp(staffInformation.information.position, "MANAGER") == 0) {
        printf("%25s", "1)Modify\n2)Display Duty Schedule\n3)Add Member Register\n4)Train Scheduling\n5)Ticket Booking\n6)RESIGNATION\n7)Search Staff Information\n8)EXIT\n");
        printf("Select the function you want >>");
        rewind(stdin);
        scanf("%d", &selectF);
        switch (selectF)
        {
        case 1: {
            modifyStaff();
            break;
        }
        case 2: {
            duty(staffInformation);
            break;
        }
        case 6: {
            system("cls");
            applyResign();
            break;
        }
        case 7: {
            system("cls");
            searchStaff();
            break;
        }
        case 8: {
            system("cls");
            main();
            break;
        }
        default:
            break;
        }


    }
    else {
        printf("%25s", "1)Modify\n2)Display Duty Schedule\n3)Add Member Register\n4)Train Scheduling\n5)Ticket Booking\n6)RESIGNATION\n7)EXIT\n");
        printf("Select the function you want >>");
        rewind(stdin);
        scanf("%d", &selectF);
        switch (selectF)
        {
        case 1: {
            modifyStaff();
            break;
        }
        case 2: {
            duty(staffInformation);
            break;
        }
        case 6: {
            system("cls");
            applyResign();
            break;
        }
        case 7: {
            system("cls");
            main();
            break;
        }
        default:
            break;
        }

    }


    decorationFlower();


}

void modifyStaff() {
    system("cls");
    struct Staff modify[10];
    int modifySave = 0, found, selectModify = 0;
    char i = 0, staffPassword[20], newName[50], adressNew[50], phoneNumberNew[13], genderNew, position[20], confirm;
    char add;
    FILE* modifyR = fopen("Staff.bin", "rb");
    if (modifyR == NULL) {
        perror("Error opening file");
        return;
    }
    while (fread(&modify[i], sizeof(struct Staff), 1, modifyR))
    {
        i++;
        modifySave = i;
    }
    fclose(modifyR);
    printf("Enter your Password :");
    rewind(stdin);
    scanf("%s", &staffPassword);

    system("cls");
    do {
        found = 0;
        for (i = 0; i < modifySave; i++) {
            if (strcmp(staffPassword, modify[i].staffPassword) == 0)
            {
                found = 1;
                do
                {

                    printf("1)Name :%s\n", modify[i].information.name);
                    printf("2)Address:%s\n", modify[i].information.address);
                    printf("3)Phone Number :%s\n", modify[i].information.phoneNumber);
                    printf("4)Email :%s\n", modify[i].information.email);
                    printf("Please select the data you want to modify >> ");
                    scanf("%d", &selectModify);
                    switch (selectModify)
                    {
                    case 1: {
                        printf("Your current Name is %s\n", modify[i].information.name);
                        printf("Enter your new data >>");
                        rewind(stdin);
                        scanf("%[^\n]", &newName);

                        break;
                    }
                    case 2: { printf("Your current Address is %s\n", modify[i].information.address);
                        printf("Enter your new data >>");
                        rewind(stdin);
                        scanf("%[^\n]", &adressNew);

                        break;
                    }
                    case 3: {printf("Your current Phone Number  is %s\n", modify[i].information.phoneNumber);
                        printf("Enter your new data >>");
                        rewind(stdin);
                        scanf("%[^\n]", &phoneNumberNew);

                        break;
                    }
                    case 4: {
                        printf("Your current Gender is %s\n", modify[i].information.email);
                        printf("Enter your new data >>");
                        rewind(stdin);
                        scanf("%%[^\n]", &genderNew);

                        break;
                    }
                    default:
                        printf("You've entered the wrong information. \n");
                        break;
                    }

                } while (selectModify < 1 || selectModify > 5);
                printf("Confirm to modify the new data ? (Y=YES)|(N=NO)");
                scanf(" %c", &confirm);
                rewind(stdin);
                if (toupper(confirm) == 'Y') {
                    if (selectModify == 1) {
                        strcpy(modify[i].information.name, newName);
                    }
                    else if (selectModify == 2) {
                        strcpy(modify[i].information.address, adressNew);
                    }
                    else if (selectModify == 3) {
                        strcpy(modify[i].information.phoneNumber, phoneNumberNew);
                    }
                    else if (selectModify == 4) {
                        strcpy(modify[i].information.email, genderNew);
                    }
                    else if (selectModify == 5) {
                        strcpy(modify[i].information.position, position);
                    }
                    printf("Data updated successfully.\n");
                }
                else {
                    printf("Update canceled.\n");
                }

            }
        }
        if (!found)
        {
            printf("The %s is error password\n", staffPassword);
        }
        system("cls");
        printf("Any more record to modify(Y=yes)");
        rewind(stdin);
        scanf("%c", &add);

    } while (toupper(add) == 'Y');
    FILE* modifyW = fopen("Staff.bin", "wb");
    for (i = 0; i < modifySave; i++)
    {
        fwrite(&modify[i], sizeof(struct Staff), 1, modifyW);
    }
    fclose(modifyW);
}

void duty(struct Staff dutyShow) {
    system("cls");
    title();
    decorationFlower();
    int selectApplyLeave = 0;

    printf("Name: %s\n", dutyShow.information.name);
    printf("ID: %s\n", dutyShow.staffID);
    printf("Position: %s\n", dutyShow.information.position);


    if (strcmp(dutyShow.information.position, "ENGINEER") == 0) {
        line();
        printf("| Day      | 8:00a.m.   \t| 10:00a.m.   \t  | 12:00p.m.  \t\t| 2:00p.m.  \t\t| 4:00p.m.     \t|\n");
        line();

        for (int day = 0; day < 7; day++) {
            printf("| %-9s", dutyShow.dutyScadule.week[day]);
            if (strcmp(dutyShow.dutyScadule.work[day][0], "Rest Day") == 0 || day == 0 || day == 6) {
                // 输出整天的休息日或周末
                printf("| %-99s\n", "Rest day");
            }
            else {
                // 输出正常的工作日计划
                for (int task = 0; task < 4; task++) {
                    printf("| %-6s ", dutyShow.dutyScadule.work[day][task]);
                }
                printf("| %-25s \n", dutyShow.dutyScadule.work[day][4]);  // 输出第五个任务，确保格式对齐
            }
            line();
        }
    }
    else if (strcmp(dutyShow.information.position, "COUNTER ATTENDANT") == 0) {
        line();
        printf("| Day      | 8:00a.m.   \t| 10:00a.m.   \t  | 12:00p.m.  \t\t| 2:00p.m.  \t\t| 4:00p.m.     \t|\n");
        line();

        for (int day = 0; day < 7; day++) {
            printf("| %-9s", dutyShow.dutyScadule.week[day]);
            if (strcmp(dutyShow.dutyScadule.work[day][0], "Rest Day") == 0 || day == 0 || day == 6) {
                // 输出整天的休息日或周末
                printf("| %-99s\n", "Rest day");
            }
            else {
                // 输出正常的工作日计划
                for (int task = 0; task < 4; task++) {
                    printf("| %-6s ", dutyShow.dutyScadule.work[day][task]);
                }
                printf("| %-25s \n", dutyShow.dutyScadule.work[day][4]);  // 输出第五个任务，确保格式对齐
            }
            line();
        }
    }
    else if (strcmp(dutyShow.information.position, "MANAGER") == 0) {
        line();
        printf("| Day      | 8:00a.m.   \t| 10:00a.m.   \t  | 12:00p.m.  \t\t| 2:00p.m.  \t\t| 4:00p.m.     \t|\n");
        line();

        for (int day = 0; day < 7; day++) {
            printf("| %-9s", dutyShow.dutyScadule.week[day]);
            if (strcmp(dutyShow.dutyScadule.work[day][0], "Rest Day") == 0 || day == 0 || day == 6) {
                // 输出整天的休息日或周末
                printf("| %-99s\n", "Rest day");
            }
            else {
                // 输出正常的工作日计划
                for (int task = 0; task < 4; task++) {
                    printf("| %-6s ", dutyShow.dutyScadule.work[day][task]);
                }
                printf("| %-25s \n", dutyShow.dutyScadule.work[day][4]);  // 输出第五个任务，确保格式对齐
            }
            line();
        }

    }
    else {
        printf("No duty schedule available for this position.\n");
    }

    printf("Apply Leave :1 \t Exit:2\n");
    printf("Select:");
    scanf("%d", &selectApplyLeave);
    clearInputBuffer();
    line();
    do
    {
        switch (selectApplyLeave) {
        case 1: {
            system("cls");
            leaveFunction(dutyShow);
            break;
        }
        case 2: {
            system("cls");
            staffPage(dutyShow);
            break;
        }
        }
    } while (selectApplyLeave == 1 || selectApplyLeave == 2);
    line();
    printf("Press any key to continue...\n");
    getchar();
    getchar();
}

void leaveFunction(struct Staff applyLeave) {
    int selectDate = 0;
    struct Staff applyLeaveSave[MAX_STAFF_INFORMATION];
    int save = 0;
    FILE* applyLifeR = fopen("Staff.bin", "rb");
    if (!applyLifeR) {
        perror("Error opening file for reading");
        return;
    }
    while (fread(&applyLeaveSave[save], sizeof(struct Staff), 1, applyLifeR))
    {
        save++;
    }
    fclose(applyLifeR);
    
    char week[15];
    
    printf("Name: %s\n", applyLeave.information.name);
    printf("ID: %s\n", applyLeave.staffID);
    printf("Position: %s\n", applyLeave.information.position);
    printf("What day you want to apply leave\n");
    printf("---------------------------------------------------------\n");
    printf("|1) MONDAY |2) TUESDAY |3) WEDNESDA|4) THURSDAY|5) FRIDAY|\n");
    printf("Select>>");
    scanf("%d", &selectDate);
    printf("----------------------------------------------------------\n");
    // Corrected portion of the function
    for (int i = 0; i < save; i++) {
        if (!strcmp(applyLeaveSave[i].staffID, applyLeave.staffID)) {
            const char* restDay = "Rest Day     ";
            if (selectDate >= 1 && selectDate <= 5) {
                for (int task = 0; task <= 4; task++) {
                    strcpy(applyLeaveSave[i].dutyScadule.work[selectDate - 1][task], restDay);  // Array is 0-indexed
                }
                switch (selectDate) {
                case 1: strcpy(week, "MONDAY"); break;
                case 2: strcpy(week, "TUESDAY"); break;
                case 3: strcpy(week, "WEDNESDAY"); break;
                case 4: strcpy(week, "THURSDAY"); break;
                case 5: strcpy(week, "FRIDAY"); break;
                }
                printf("Leave applied successfully for %s.\n", week);
            }
            else {
                printf("Invalid day selection.\n");
            }
        }
    }
    getchar();

    FILE* applyLifeW = fopen("Staff.bin", "wb");
    if (!applyLifeW) {
        perror("Error opening file for writing");
        return;
    }
    fwrite(applyLeaveSave, sizeof(struct Staff), save, applyLifeW);
    fclose(applyLifeW);
    char select;
    printf("Press E to back to saff page");
    scanf("%c",&select);
    if (toupper(select)=='E')
    {
        system("cls");
        main();
    }
    else
    {
        do
        {
            printf("Press E to back to saff page");
            scanf("%c", &select);
        } while (toupper(select) == 'E');
    }
}

void applyResign() {
    struct Staff applyResign[MAX_STAFF_INFORMATION];
    int i, pEntries;
    char selectCom[6], choice, passwordCheck[20], reason[200];
    FILE* sthA = fopen("Staff.bin", "rb");
    if (sthA == NULL) {
        perror("Error opening file");
        return;
    }

    pEntries = 0;
    while (fread(&applyResign[pEntries], sizeof(struct Staff), 1, sthA) == 1) {
        pEntries++;
    }
    fclose(sthA);

    printf("Are you sure you want to quit for the job?\nY (YES) || N (NO)\n");
    scanf("%s", selectCom);
    clearInputBuffer();

    if (toupper(selectCom[0]) == 'Y') {
        printf("Please enter your Password to validation is you to control the account\nPassword: ");
        scanf("%s", passwordCheck);
        clearInputBuffer();

        for (i = 0; i < pEntries; i++) {
            if (strcmp(applyResign[i].staffPassword, passwordCheck) == 0) {
                printf("Your reason for resignation: ");
                scanf("%[^\n]", reason);
                clearInputBuffer();
                printf("Are you sure you want to resign, %s? (Y/N)\n", applyResign[i].information.name);
                scanf("%c", &choice);
                clearInputBuffer();

                if (toupper(choice) == 'Y') {
                    printf("Deleting...\n");
                    //shift the rest forward
                    do {
                        applyResign[i] = applyResign[i + 1];
                    } while (++i < pEntries - 1);

                    //write into file
                    FILE* sthW = fopen("Staff.bin", "wb");
                    if (sthW == NULL)
                    {
                        printf("File cannot be opened.\n");
                        return;
                    }
                    fwrite(applyResign, sizeof(struct Staff), pEntries - 1, sthW);
                    printf("Completed.\n");
                    fclose(sthW);
                }
            }
        }
        if (i == pEntries) {
            printf("Password not matched any records or cancellation not confirmed.\n");
        }
    }
    else if (toupper(selectCom[0]) == 'N') {
        printf("Cancellation not confirmed.\n");
    }
    else {
        printf("Invalid command entered.\n");
    }
}

void searchStaff() {
    char ID[20];
    int found = 0;
    FILE* searchR = fopen("Staff.bin", "rb");
    if (searchR == NULL) {
        perror("Error opening file");
        return;
    }

    struct Staff searchInformation[10];
    int p = 0;
    while (fread(&searchInformation[p], sizeof(struct Staff), 1, searchR) && p < 10) {
        p++;
    }
    fclose(searchR);

    title();
    decoration();
    printf("Please enter the Staff ID you want to find: ");
    scanf("%s", ID);
    clearInputBuffer();

    for (int i = 0; i < p; i++) {
        if (strcmp(searchInformation[i].staffID, ID) == 0) {
            printf("Name: %s\n", searchInformation[i].information.name);
            printf("Address: %s\n", searchInformation[i].information.address);
            printf("Phone Number: %s\n", searchInformation[i].information.phoneNumber);
            printf("Email: %s\n", searchInformation[i].information.email);
            printf("Position: %s\n", searchInformation[i].information.position);
            getchar();
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("Invalid ID entered.\n");
    }
}

void decorationFlower() {
    printf("%s", "*");
    for (int i = 0; i < 40; i++) {
        printf("*");
    }
    printf("\n");
}

void title() {
    int i;
    printf("\n\n");
    decoration();
    printf("%s", ""); // Centering the title
    for (i = 0; i < 3; i++) {
        printf("#"); // Start border
    }
    printf(" Bla Bla Bla Train Station "); // Title
    for (i = 0; i < 3; i++) {
        printf("#"); // End border
    }
    printf("\n");
    decoration();
    printf("\n");
}

void decoration() {
    int i;
    printf("%s", ""); // Centering the decoration
    for (i = 0; i < 35; i++) {
        printf("*");
    }
    printf("\n");
}

void line() {

    for (int i = 0; i < 113; i++)
    {
        printf("-");
    }
    printf("\n");
}
