#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <conio.h>
#include <Windows.h>//used to access the Win32 API functions
#pragma warning(disable:4996)
#define TRAINS 10
#define STATION 50
#define TIME 10
#define STATUS 20

struct DATE {									// This struct represents a date with day, month, and year components.
	int day, month, year;						//Holds the day, month, year component of the date.
};

struct Time {									// This struct represents a time with hour and minute components.
	int hour, min;								// Holds the hour, and minute component of the time.
};

typedef struct {								 // Define a custom data type named TICKET using typedef.
	char ticketID[10], name[30], coach, status[30], departStation[30], arrivStation[30];
	struct DATE bookDate, departDate;			//Holds the booking date, and departure date using the DATE struct
	struct Time time;							// Holds the time using the TIME struct.
	int seatNo, departPlatform;
	double amount;
}TICKET;

typedef struct {
	char fnbName[30];
	double price;
}FNB;

typedef struct {
	int trainID;
	char departureStation[STATION];
	int departurePlatform;
	char departureTime[TIME];
	char arrivalStation[STATION];
	char eta[TIME];
	double ticketPrice;
	int availableSeats;
	char trainStatus[STATUS];
}Train;

//Declare functions
int readTicketFile(TICKET ticket[]);
void functionsChoosen(TICKET ticket[], int* numOfTicket, FNB fnb[], int* numOfItem);
void displayTrainList();
void addBooking(TICKET ticket[], int* numOfTicket, FILE* list, Train trains[]);
void searchBooking(TICKET ticket[], int* numOfTicket);
void editBooking(TICKET ticket[], int* numOfTicket);
void displayBooking(TICKET ticket[], int* numOfTicket);
void deleteBooking(TICKET ticket[], int* numOfTicket);
void fnbFunction(FNB fnb[], int* numOfItem);
void paymentFunction();
void displayAllTicket(TICKET tikcet[], int* numOfTicket);
void exitFunction(TICKET ticket[], int* numOfTicket);

//Main Menu
void main(Train trains[], FILE* list) {
	system("cls");											// Clear the console screen.						
	TICKET ticket[100];										// Declare an array of TICKET structs to store ticket information.
	int numOfTicket = readTicketFile(ticket);				// Call the readTicketFile function to read ticket information from a file. Store the number of tickets read into numOfTicket.
	FNB fnb[10];
	int numOfItem = 0;
	functionsChoosen(ticket, &numOfTicket, fnb, &numOfItem, trains, list);  // Call the functionsChoosen function to handle user input and perform actions accordingly.
}

int readTicketFile(TICKET ticket[]) {						// Function to read ticket information from a file.
	int count = 0;											// Counter for the number of tickets read.
	FILE* readTF;											// File pointer for reading the ticket file.
	TICKET temp;											// Temporary variable to hold ticket data while reading.
	readTF = fopen("Ticket.txt", "r");						// Open the ticket file for reading.
	if (readTF == NULL) {									// Check if the file opened successfully.
		printf("Can't open the file ticket.txt!\n\n");
		exit(-1);
	}
	while (fscanf(readTF, "%[^|]|%[^|]|%02d/%02d/%04d|%02d:%02d|%02d/%02d/%04d|%[^|]|%[^|]|%c|%d|%d|%[^\n]\n",
		temp.ticketID, temp.name, &temp.bookDate.day, &temp.bookDate.month, &temp.bookDate.year, &temp.time.hour, &temp.time.min, &temp.departDate.day, &temp.departDate.month, &temp.departDate.year,
		temp.departStation, temp.arrivStation, &temp.coach, &temp.seatNo, temp.departPlatform, temp.status) != EOF) {		 // Read ticket information from the file until the end of file (EOF) is reached.
		ticket[count] = temp;					// Assign the read ticket data to the corresponding element in the ticket array.
		count++;								// Increment the ticket count.
	}
	fclose(readTF);								// Close the file after reading.

	return count;								 // Return the total number of tickets read from the file.
}

void displayTrainList() {
	FILE* list;
	Train trains[TRAINS];
	int i = 0;

	if ((list = fopen("train.txt", "r")) == NULL) {
		printf("Error opening the file...\n\n");
		return;
	}

	printf("Train Schedule List\n");
	printf("===================\n\n");
	printf("%-10s | %-20s | %-18s | %-14s | %-16s | %-6s | %-13s | %-16s | %s\n",
		"Train ID",
		"Departure Station",
		"Departure Platform",
		"Departure Time",
		"Arrival Station",
		"ETA",
		"Ticket Price",
		"Available Seats",
		"Train Status");
	printf("-----------------------------------------------------------------------------------------------------------------------------------------------------\n");

	//read data from text file and print out
	while (fscanf(list, "%d#%[^#]#%d#%[^#]#%[^#]#%[^#]#%lf#%d#%[^\n]",
		&trains[i].trainID, trains[i].departureStation, &trains[i].departurePlatform, trains[i].departureTime, trains[i].arrivalStation, trains[i].eta,
		&trains[i].ticketPrice, &trains[i].availableSeats, trains[i].trainStatus) != EOF) {
		printf("%-10d | %-20s | %-18d | %-14s | %-16s | %-6s | %-13.2lf | %-16d | %s\n",
			trains[i].trainID,
			trains[i].departureStation,
			trains[i].departurePlatform,
			trains[i].departureTime,
			trains[i].arrivalStation,
			trains[i].eta,
			trains[i].ticketPrice,
			trains[i].availableSeats,
			trains[i].trainStatus);
		i++;
	}

	fclose(list);
}

void functionsChoosen(TICKET ticket[], int* numOfTicket, FNB fnb[], int* numOfItem, Train trains[], FILE* list) {				// Function to handle various ticket booking operations based on user input. Using parameters to pass value.
	system("cls");
	int choice;

	do {
		printf("============================================\n");
		printf("\t      TICKET BOOKING\n");
		printf("============================================\n\n");
		printf("1. Add Ticket Booking(s)\n");
		printf("2. Search Ticket Booking(s)\n");
		printf("3. Edit Ticket Booking(s)\n");
		printf("4. Cancel Ticket Booking(s)\n");
		printf("5. Display Ticket Booking(s)\n");
		printf("6. F&B\n");
		printf("7. Payment\n");
		printf("8. Exit TICKET BOOKING\n\n");
		printf("Please choose from 1-8: ");
		scanf("%d", &choice);
		rewind(stdin);
		switch (choice) {
		case 1: addBooking(ticket, numOfTicket, trains, list); break;
		case 2: searchBooking(ticket, numOfTicket); break;
		case 3: editBooking(ticket, numOfTicket); break;
		case 4: deleteBooking(ticket, numOfTicket); break;
		case 5: displayBooking(ticket, numOfTicket); break;
		case 6: fnbFunction(fnb, numOfItem); break;
		case 7: paymentFunction(); break;
		case 8: exitFunction(ticket, numOfTicket); break;
		default: printf("Invalid choice! Please key in again.\n\n");
		};
	} while (choice != 8);					// Continue the loop until the user key in number 8 to exit.
}

void addBooking(TICKET ticket[], int* numOfTicket, Train trains[], FILE* list) {  //void addBooking(FILE *ticketFile)
	system("cls");
	//FILE* trainFile;
	int i = 0;
	Train temp;
	//trainFile = fopen("train.txt", "r");
	//if ("trainFile == NULL") {
		//printf("Can't open the file train.txt!\n");
		//exit(-1);
	//}

	displayTrainList();
	char confirmAdd, cont;
	SYSTEMTIME t; //structure for date, time etc
	printf("\n\n============================================\n");
	printf("\t    Add Ticket Booking\n");
	printf("============================================\n\n");
	do {
		printf("\nEnter Ticket Booking Details: \n");
		printf(" Ticket Holder Name: ");
		scanf("%[^\n]", &ticket[*numOfTicket].name);
		printf(" Deparutre Date: \n");
		printf("\t     dd: ");
		scanf("%d", &ticket[*numOfTicket].departDate.day);
		while (ticket[*numOfTicket].departDate.day <= 0 || ticket[*numOfTicket].departDate.day >= 32) {
			printf("Invalid day! Please enter again.\n");
			printf("\t     dd: ");
			scanf("%d", &ticket[*numOfTicket].departDate.day);
		}
		rewind(stdin);
		printf("\t     mm: ");
		scanf("%d", &ticket[*numOfTicket].departDate.month);
		while (ticket[*numOfTicket].departDate.month <= 0 || ticket[*numOfTicket].departDate.month >= 13) {
			printf("Invalid month! Please enter again.\n");
			printf("\t     mm: ");
			scanf("%d", &ticket[*numOfTicket].departDate.month);
		}
		rewind(stdin);
		printf("\t   yyyy: ");
		scanf("%d", &ticket[*numOfTicket].departDate.year);
		while (ticket[*numOfTicket].departDate.year < 2024 || ticket[*numOfTicket].departDate.year > 2025) {
			printf("Booking only within 2024 - 2025.\n");
			printf("\t     yy: ");
			scanf("%d", &ticket[*numOfTicket].departDate.year);
		}
		rewind(stdin);
		printf(" Departure Station: ");
		scanf("%[^\n]", &temp.departureStation);
		rewind(stdin);
		printf(" Arrival Station: ");
		scanf("%[^\n]", &temp.arrivalStation);
		rewind(stdin);
		if (strcmp(temp.departureStation, trains[i].departureStation) == 0) {
			if (strcmp(temp.arrivalStation, trains[i].arrivalStation) == 0) {
			strcpy(temp.departureStation, ticket[*numOfTicket].departStation);
			strcpy(temp.arrivalStation, ticket[*numOfTicket].arrivStation);
			temp.departurePlatform = ticket[*numOfTicket].departPlatform;
			}
			else {
				printf("Departure Station or Arrival Station is not schedule in the Train Schedule List! Please try again.\n");
				printf(" Departure Station: ");
				scanf("%[^\n]", &temp.departureStation);
				rewind(stdin);
				printf(" Arrival Station: ");
				scanf("%[^\n]", &temp.arrivalStation);
				rewind(stdin);
			}
		}
		else {
			printf("Departure Station or Arrival Station is not schedule in the Train Schedule List! Please try again.\n");
			printf(" Departure Station: ");
			scanf("%[^\n]", &temp.departureStation);
			rewind(stdin);
			printf(" Arrival Station: ");
			scanf("%[^\n]", &temp.arrivalStation);
			rewind(stdin);
		}
		printf(" Coach (A-J): ");
		scanf("%c", &ticket[*numOfTicket].coach);
		ticket[*numOfTicket].coach = toupper(ticket[*numOfTicket].coach);
		while (ticket[*numOfTicket].coach >= 'K') {
			printf("Invalid Coach! Please enter a Coach between A-J.\n");
			printf(" Coach (A-J): ");
			scanf("%c", &ticket[*numOfTicket].coach);
		}
		rewind(stdin);
		printf(" Seat No (1-30): ");
		scanf("%d", &ticket[*numOfTicket].seatNo);
		while (ticket[*numOfTicket].seatNo <= 0 || ticket[*numOfTicket].seatNo > 30) {
			printf("Invalid Seat No! Please enter a Seat No between 1-30.\n");
			printf(" Seat No (1-30): ");
			scanf("%d", &ticket[*numOfTicket].seatNo);
		}
		rewind(stdin);

		printf("Confirm to make the booking? (Y = Yes): ");
		scanf("%c", &confirmAdd);
		rewind(stdin);
		if (toupper(confirmAdd) == 'Y') {
			GetLocalTime(&t); //get real date/time from OS
			ticket[*numOfTicket].time.hour = t.wHour;
			ticket[*numOfTicket].time.min = t.wMinute;
			ticket[*numOfTicket].bookDate.day = t.wDay;
			ticket[*numOfTicket].bookDate.month = t.wMonth;
			ticket[*numOfTicket].bookDate.year = t.wYear;

			sprintf(ticket[*numOfTicket].ticketID, "B%04d", (*numOfTicket) + 1);
			strcpy(ticket[*numOfTicket].status, "Pending payment...");
			printf("\n\n======================================================\n");
			printf("Ticket Summary: \n");
			printf("\n\tBooking ID: \t     %s\n\tTicket Holder Name:  %s\n\tBooking Date: \t     %02d/%02d/%04d\n\tBooking Time: \t     %02d:%02d\n\tDeparture Date:      %02d/%02d/%04d\n\tDeparture Station:   %s\n\tArrival Station:     %s\n\tCoach: \t\t     %c\n\tSeat No: \t     %d\n\tDeparture Platform: \t     %d\n\tBooking Status: \t     %s\n",
				ticket[*numOfTicket].ticketID, ticket[*numOfTicket].name, ticket[*numOfTicket].bookDate.day, ticket[*numOfTicket].bookDate.month, ticket[*numOfTicket].bookDate.year, ticket[*numOfTicket].time.hour, ticket[*numOfTicket].time.min,
				ticket[*numOfTicket].departDate.day, ticket[*numOfTicket].departDate.month, ticket[*numOfTicket].departDate.year, ticket[*numOfTicket].departStation, ticket[*numOfTicket].arrivStation,
				ticket[*numOfTicket].coach, ticket[*numOfTicket].seatNo, ticket[*numOfTicket].departPlatform, ticket[*numOfTicket].status);
			(*numOfTicket)++;
			printf("======================================================\n");
		}
		else
			printf("Ticket NOT booked!\n\n");
		printf("\n\nMake another booking? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');

	system("cls");
}

void searchBooking(TICKET ticket[], int* numOfTicket) {
	system("cls");
	int i, searchMonth, searchYear, count;
	char cont, found;
	printf("============================================\n");
	printf("\t    Search Ticket Booking\n");
	printf("============================================\n\n");
	do {
		count = 0;
		found = 0;
		printf("Search for the Departure Date of ticket(s) in which Month and Year?\n");
		printf("Month: ");
		scanf("%d", &searchMonth);
		while (searchMonth <= 0 || searchMonth >= 13) {
			printf("Invalid month! Please enter again.\n");
			printf("Month: ");
			scanf("%d", &searchMonth);
		}
		rewind(stdin);
		printf("Year:  ");
		scanf("%d", &searchYear);
		while (searchYear < 2024 || searchYear > 2025) {
			printf("Booking only available within 2024 - 2025.\n");
			printf("Year:  ");
			scanf("%d", &searchYear);
		}
		rewind(stdin);
		printf("\n%-10s %-20s %-15s %-15s %-15s %-6s %-8s\n", "Ticket ID", "Ticket Holder Name", "Departure Date", "Departure Station", "Arrival Station", "Coach", "Seat No");
		printf("%-10s %-20s %-15s %-15s %-15s %-6s %-8s\n", "=========", "==================", "==============", "=================", "===============", "=====", "=======");
		for (i = 0; i < *numOfTicket; i++) {
			if (searchMonth == ticket[i].departDate.month && searchYear == ticket[i].departDate.year) {
				found = 1;
				printf("%-10s %-20s %02d/%02d/%04d %18s %12s %10c %7d\n",
					ticket[i].ticketID, ticket[i].name, ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year, ticket[i].departStation, ticket[i].arrivStation,
					ticket[i].coach, ticket[i].seatNo);
				count++;
			}
		}
		if (!found) {
			printf("- -Departure Date NOT Found!- -\n\n");
		}
		printf("\n\t%d ticket(s) booked for %02d/%04d\n\n", count, searchMonth, searchYear);
		printf("Search another Departure Date? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');

	system("cls");
}

void editBooking(TICKET ticket[], int* numOfTicket) {
	system("cls");
	int i, editIndex;
	char editID[10], confirmUpd, cont;
	TICKET temp;
	printf("============================================\n");
	printf("\t    Edit Ticket Booking\n");
	printf("============================================\n\n");
	do {
		editIndex = -1;
		printf("\nEnter Booking ID to edit: ");
		scanf("%s", &editID);
		rewind(stdin);
		i = 0;
		for (int i = 0; i < *numOfTicket; i++) {
			if (strcmp(editID, ticket[i].ticketID) == 0) {
				editIndex = i;
				break;
			}
		}
		if (editIndex == -1) {
			printf("\tError: Ticket Booking NOT Found!\n\n");
		}
		else {
			printf("\nRecord Found: \n");
			printf("\n\tBooking ID: \t     %s\n\tTicket Holder Name:  %s\n\tBooking Date: \t     %02d/%02d/%04d\n\tBooking Time: \t     %02d:%02d\n\tDeparture Date:      %02d/%02d/%04d\n\tDeparture Station:   %s\n\tArrival Station:     %s\n\tCoach: \t\t     %c\n\tSeat No: \t     %d\n\tStatus: \t     %s\n",
				ticket[editIndex].ticketID, ticket[editIndex].name, ticket[editIndex].bookDate.day, ticket[editIndex].bookDate.month, ticket[editIndex].bookDate.year, ticket[editIndex].time.hour, ticket[editIndex].time.min,
				ticket[editIndex].departDate.day, ticket[editIndex].departDate.month, ticket[editIndex].departDate.year, ticket[editIndex].departStation, ticket[editIndex].arrivStation,
				ticket[editIndex].coach, ticket[editIndex].seatNo, ticket[editIndex].status);

			printf("\n\n");
			displayTrainList();
			printf("\nEnter Updated Details: \n");
			printf(" Ticket ID: %s\n", ticket[editIndex].ticketID);
			printf(" Ticket Holder Name: ");
			scanf("%[^\n]", &temp.name);
			rewind(stdin);
			printf(" Deparutre Date: \n");
			printf("\t     dd: ");
			scanf("%d", &temp.departDate.day);
			while (temp.departDate.day <= 0 || temp.departDate.day >= 32) {
				printf("Invalid day! Please enter again.\n");
				printf("\t     dd: ");
				scanf("%d", &temp.departDate.day);
			}
			rewind(stdin);
			printf("\t     mm: ");
			scanf("%d", &temp.departDate.month);
			while (temp.departDate.month <= 0 || temp.departDate.month >= 13) {
				printf("Invalid month! Please enter again.\n");
				printf("\t     mm: ");
				scanf("%d", &temp.departDate.month);
			}
			rewind(stdin);
			printf("\t   yyyy: ");
			scanf("%d", &temp.departDate.year);
			while (temp.departDate.year < 2024 || temp.departDate.year > 2025) {
				printf("Booking only available within 2024 - 2025.\n");
				printf("\t     yy: ");
				scanf("%d", &temp.departDate.year);
			}
			rewind(stdin);
			printf(" Departure Station: ");
			scanf("%[^\n]", &temp.departStation);
			rewind(stdin);
			printf(" Arrival Station: ");
			scanf("%[^\n]", &temp.arrivStation);
			rewind(stdin);
			printf(" Coach (A-J): ");
			scanf("%c", &temp.coach);
			temp.coach = toupper(temp.coach);
			while (temp.coach >= 'K') {
				printf("Invalid Coach! Please enter a Coach between A-J.\n");
				printf(" Coach (A-J): ");
				scanf("%c", &temp.coach);
			}
			rewind(stdin);
			printf(" Seat No (1-30): ");
			scanf("%d", &temp.seatNo);
			if (temp.seatNo <= 0 || temp.seatNo > 31) {
				printf("Invalid Seat No! Please enter between 1-30.\n");
				printf(" Seat No (1-30): ");
				scanf("%d", &temp.seatNo);
			}
			rewind(stdin);

			printf("Confirm to update? (Y = Yes): ");
			scanf("%c", &confirmUpd);
			rewind(stdin);

			if (toupper(confirmUpd) == 'Y') {
				strcpy(temp.ticketID, editID);
				temp.bookDate.day = ticket[editIndex].bookDate.day;
				temp.bookDate.month = ticket[editIndex].bookDate.month;
				temp.bookDate.year = ticket[editIndex].bookDate.year;
				temp.time.hour = ticket[editIndex].time.hour;
				temp.time.min = ticket[editIndex].time.min;
				strcpy(temp.status, ticket[editIndex].status);
				ticket[editIndex] = temp;
				printf("Update Successfully!\n\n");
			}
			else
				printf("\nNo changes made.\n\n");

			printf("\nCurrent Record Details: \n");
			printf("\n\tBooking ID: \t     %s\n\tTicket Holder Name:  %s\n\tBooking Date: \t     %02d/%02d/%04d\n\tBooking Time: \t     %02d:%02d\n\tDeparture Date:      %02d/%02d/%04d\n\tDeparture Station:   %s\n\tArrival Station:     %s\n\tCoach: \t\t     %c\n\tSeat No: \t     %d\n\tBooking Status: \t     %s\n",
				ticket[editIndex].ticketID, ticket[editIndex].name, ticket[editIndex].bookDate.day, ticket[editIndex].bookDate.month, ticket[editIndex].bookDate.year, ticket[editIndex].time.hour, ticket[editIndex].time.min, ticket[editIndex].departDate.day, ticket[editIndex].departDate.month, ticket[editIndex].departDate.year,
				ticket[editIndex].departStation, ticket[editIndex].arrivStation, ticket[editIndex].coach, ticket[editIndex].seatNo, ticket[editIndex].status);
		}
		printf("\nEdit another ticket booking? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
		printf("-----------------------------------------------------------------------------------------------------------------------------------------------------\n");
	} while (toupper(cont) == 'Y');

	system("cls");
}

void displayBooking(TICKET ticket[], int* numOfTicket) {
	system("cls");
	char displayName[30];
	int found;
	char cont;
	printf("============================================\n");
	printf("\t    Display Ticket Booking\n");
	printf("============================================\n\n");
	do {
		found = 0;
		printf("Enter Ticket Holder Name to display: ");
		scanf("%[^\n]", displayName);
		rewind(stdin);
		for (int i = 0; i < *numOfTicket; i++) {
			if (strcmp(displayName, ticket[i].name) == 0) {
				found = 1;
				printf("\n\tBooking ID: \t     %s\n\tTicket Holder Name:  %s\n\tBooking Date: \t     %02d/%02d/%04d\n\tBooking Time: \t     %02d:%02d\n\tDeparture Date:      %02d/%02d/%04d\n\tDeparture Station:   %s\n\tArrival Station:     %s\n\tCoach: \t\t     %c\n\tSeat No: \t     %d\n\tBooking Status: \t     %s\n",
					ticket[i].ticketID, ticket[i].name, ticket[i].bookDate.day, ticket[i].bookDate.month, ticket[i].bookDate.year, ticket[i].time.hour, ticket[i].time.min, ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year,
					ticket[i].departStation, ticket[i].arrivStation, ticket[i].coach, ticket[i].seatNo, ticket[i].status);
			}
		}
		if (!found) {
			printf("- -Booking Name NOT Found!- -\n\n");
		}
		printf("\nDisplay another? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');

	system("cls");
}

void deleteBooking(TICKET ticket[], int* numOfTicket) {
	system("cls");
	char deleteID[10], cont, confirmDlt;
	int found = 0;
	printf("============================================\n");
	printf("\t    Cancel Ticket Booking\n");
	printf("============================================\n\n");
	do {
		printf("Enter the Booking ID to cancel the booking: ");
		scanf("%s", &deleteID);
		rewind(stdin);
		for (int i = 0; i < *numOfTicket; i++) {
			if (strcmp(deleteID, ticket[i].ticketID) == 0) {
				// Display ticket details
				printf("\nBooking found:\n");
				printf("\n\tBooking ID: \t     %s", ticket[i].ticketID);
				printf("\n\tTicket Holder Name:  %s", ticket[i].name);
				printf("\n\tDeparture Date:      %02d/%02d/%04d", ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year);
				printf("\n\tDeparture Station:   %s", ticket[i].departStation);
				printf("\n\tArrival Station:     %s", ticket[i].arrivStation);
				printf("\n\tCoach: \t\t     %c", ticket[i].coach);
				printf("\n\tSeat No: \t     %d", ticket[i].seatNo);
				printf("\n\nConfirm deletion of this ticket? (Y = Yes): ");
				scanf("%c", &confirmDlt);
				rewind(stdin);
				if (toupper(confirmDlt) == 'Y') {
					(*numOfTicket)--;
					found = 1;
					printf("Ticket with ID %s deleted successfully.\n", deleteID);
				}
				else {
					found = 1;
					printf("Deletion canceled.\n");
				}
			}
		}
		if (!found) {
			printf("\nTicket with ID %s not found.\n", deleteID);
		}

		printf("\nDelete another Ticket Booking? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');

	system("cls");
}

void fnbFunction(FNB fnb[], int* numOfItem) {
	system("cls");
	int choice, quantity, cont;
	double fnbTotal = 0;
	FILE* fnbFile;
	fnbFile = fopen("F&B.txt", "r");
	if (fnbFile == NULL) {
		printf("Can't open the file F&B.txt!\n\n");
		return;
	}
	else {
		while (fscanf(fnbFile, "%[^|]|%lf\n", &fnb[*numOfItem].fnbName, &fnb[*numOfItem].price) != EOF)
			(*numOfItem)++;
		do {
			printf("============================================\n");
			printf("\t      F&B MENU\n");
			printf("============================================\n\n");
			for (int i = 0; i < *numOfItem; i++) {
				printf("%d. %s - RM%.2lf\n", i + 1, fnb[i].fnbName, fnb[i].price);
			}

			printf("\nPlease enter the item number you'd like to order (1-6): "); //Ask for user's choice
			scanf("%d", &choice);
			if (choice < 1 || choice > *numOfItem) {
				printf("Invalid choice!\n");
				return;
			}

			printf("Enter the quantity: ");  //Ask for the quantity
			scanf("%d", &quantity);
			if (quantity <= 0) {
				printf("Invalid quantity!\n");
				return;
			}
			fnbTotal = fnb[choice - 1].price * quantity;  //Calculate total price

			printf("\nOrder Summary:\n");  //Display order summary
			printf("%d x %s - RM%.2lf\n", quantity, fnb[choice - 1].fnbName, fnbTotal);
			printf("Total amount: RM%.2lf\n\n", fnbTotal);

			printf("Add another order? (Y = Yes): ");
			scanf("%c", &cont);
			rewind(stdin);
		} while (toupper(cont) == 'Y');
	}
	fclose(fnbFile);
	system("cls");
}

void paymentFunction() {
	/*int paid, creditCard, onlineBanking;
	ticket.amount = count * 65.00;
	printf("\nPlace booking:\n");
	printf("Total amount: %.2lf", ticket.amount);
	printf("\nPay by:\n 1. Credit Card\n 2. Online Banking\n >  ");
	scanf("%d", &paid);
	rewind(stdin);
	if (paid = 1) {
		printf("Please enter your Credit Card No: ");
		scanf("%d", &creditCard);
		rewind(stdin);
		printf("\nSuccessfully booked!\n\n\n");
		strcpy(ticket.payment, "Booked");
		fprintf(fptr, "%s|%02d/%02d/%04d|%c|%d|%s\n", ticket.name, ticket.date.day, ticket.date.month, ticket.date.year, ticket.coach, ticket.seatNo, ticket.payment);
	}
	else if (paid = 2) {
		printf("Please enter your Account No: ");
		scanf("%d", &onlineBanking);
		rewind(stdin);
		printf("\nSuccessfully booked!\n\n\n");
		strcpy(ticket.payment, "Booked");
		fprintf(fptr, "%s|%02d/%02d/%04d|%c|%d|%s\n", ticket.name, ticket.date.day, ticket.date.month, ticket.date.year, ticket.coach, ticket.seatNo, ticket.payment);
	}
	else {
		printf("Invalid payment!\nTicket NOT booked!\n\n");
	}*/
}

void displayAllTicket(TICKET ticket[], int* numOfTicket) {
	system("cls");
	int i, count = 0;
	printf("============================================\n");
	printf("\t    Display ALL Ticket Booking\n");
	printf("============================================\n\n");
	printf("%-15s %-20s %-15s %-15s %-15s %-20s %-20s %-6s %-8s %-15s\n",
		"Booking ID", "Ticket Holder Name", "Booking Date", "Booking Time", "Departure Date", "Departure Station", "Arrival Station", "Coach", "Seat No", "Booking Status");
	printf("%-15s %-20s %-15s %-15s %-15s %-20s %-20s %-6s %-8s %-15s\n",
		"==========", "==================", "============", "============", "==============", "=================", "===============", "=====", "=======", "=============");
	for (i = 0; i < *numOfTicket; i++) {
		printf("%-15s %-20s  %02d/%02d/%04d  %02d:%02d  %02d/%02d/%04d %-20s %-20s %-6s %-8s %-15s\n",
			ticket[i].ticketID, ticket[i].name, ticket[i].bookDate.day, ticket[i].bookDate.month, ticket[i].bookDate.year, ticket[i].time.hour, ticket[i].time.min, ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year,
			ticket[i].departStation, ticket[i].arrivStation, ticket[i].coach, ticket[i].seatNo, ticket[i].status);
		count++;
	}
	printf("\n\t%d ticket booking records listed.\n\n", count);
}

void exitFunction(TICKET ticket[], int* numOfTicket) {
	system("cls");
	FILE* ticketFile;
	ticketFile = fopen("Ticket.txt", "w");
	if (ticketFile == NULL) {
		printf("Can't open the file Ticket.txt!\n");
		exit(-1);
	}
	for (int i = 0; i < *numOfTicket; i++) {
		fprintf(ticketFile, "%s|%s|%02d/%02d/%04d|%02d:%02d|%02d/%02d/%04d|%s|%s|%c|%d|%d|%s\n",
			ticket[i].ticketID, ticket[i].name, ticket[i].bookDate.day, ticket[i].bookDate.month, ticket[i].bookDate.year, ticket[i].time.hour, ticket[i].time.min, ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year,
			ticket[i].departStation, ticket[i].arrivStation, ticket[i].coach, ticket[i].seatNo, ticket[i].departPlatform, ticket[i].status);
	}
	fclose(ticketFile);
	printf("======================================================\n");
	printf("Thank You for using TICKET BOOKING. See you next time!\n");
	printf("======================================================\n");
	exit(-1);
}
