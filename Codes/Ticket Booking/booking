#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <conio.h>
#include <stdbool.h>
#include <Windows.h>	// Used to access the Win32 API functions
#pragma warning(disable:4996)
#define TRAINS 10
#define STATION 50
#define TIME 10
#define STATUS 20

struct DATE {	// This struct represents a date with day, month, and year components.
	int day, month, year;	// Holds the day, month, year component of the date.
};

struct Time {	// This struct represents a time with hour and minute components.
	int hour, min;	// Holds the hour, and minute component of the time.
};

typedef struct {	// Define a custom data type named TICKET using typedef.
	char ticketID[10], name[30], coach, status[30], departStation[50], arrivStation[50];
	char departTime[10], estimateTimeArrive[10];
	struct DATE bookDate, departDate;	// Holds the booking date, and departure date using the DATE struct
	struct Time time; // Holds the time using the TIME struct.
	int seatNo, departPlatform;
	double amount, ticPrice;
}TICKET;

typedef struct {	// Definition of a structure representing a food and beverage item.
	char fnbName[30];
	double fnbPrice;
}FNB;

typedef struct {
	int trainID;
	char departureStation[STATION];
	int departurePlatform;
	char departureTime[TIME];
	char arrivalStation[STATION];
	char eta[TIME];
	double ticketPrice;
	int availableSeats;
	char trainStatus[STATUS];
}Train;

//Declare functions
int readTicketFile(TICKET ticket[]);
int readTrainFile(Train trains[]);
int readFnBFile(FNB fnb[]);
void functionsChoosen(TICKET ticket[], int* numOfTicket, FNB fnb[], int* numOfItem, Train trains[], int* numOfTrain);
void displayTrainList(Train trains[]);
void addBooking(TICKET ticket[], int* numOfTicket, Train trains[], int* numOfTrain, FNB fnb[], int* numOfItem);
void searchBooking(TICKET ticket[], int* numOfTicket);
void editBooking(TICKET ticket[], int* numOfTicket, Train trains[], int* numOfTrain, FNB fnb[], int* numOfItem);
void displayBooking(TICKET ticket[], int* numOfTicket);
void deleteBooking(TICKET ticket[], int* numOfTicket);
void displayFnBMenu(FNB fnb[], int* numOfItem);
double fnbFunction(FNB fnb[], int* numOfItem);
void paymentFunction(TICKET ticket[], int* numOfTicket);
void displayAllTicket(TICKET tikcet[], int* numOfTicket);
void exitFunction(TICKET ticket[], int* numOfTicket);

//Main Menu
void main() {
	system("cls");	// Clear the console screen.
	Train trains[TRAINS];
	int numOfTrain = readTrainFile(trains);
	TICKET ticket[100];	// Declare an array of TICKET structs to store ticket information.
	int numOfTicket = readTicketFile(ticket);	// Call the readTicketFile function to read ticket information from a file. Store the number of tickets read into numOfTicket.
	FNB fnb[10];	// Declare an array of F&B structs to store food and beverage information.
	int numOfItem = readFnBFile(fnb);	// Call the readFnBFile function to read F&B information from a file. Store the number of F&B read into numOfItem.
	functionsChoosen(ticket, &numOfTicket, fnb, &numOfItem, trains, &numOfTrain);  // Call the functionsChoosen function to handle user input and perform actions accordingly.
}

int readTrainFile(Train trains[]) {
	int count = 0;
	FILE* list;
	Train temp;
	if ((list = fopen("train.txt", "r")) == NULL) {
		printf("Error opening the file...\n\n");
		return;
	}
	while (fscanf(list, "%d#%[^#]#%d#%[^#]#%[^#]#%[^#]#%lf#%d#%[^\n]",
		&temp.trainID, temp.departureStation, &temp.departurePlatform, temp.departureTime, temp.arrivalStation, temp.eta,
		&temp.ticketPrice, &temp.availableSeats, temp.trainStatus) != EOF) {
		trains[count] = temp;
		count++;
	}
	fclose(list);

	return count;
}

int readTicketFile(TICKET ticket[]) {	// Function to read ticket information from a file.
	int count = 0;	// Counter for the number of tickets read.
	FILE* readTF;	// File pointer for reading the ticket file.
	TICKET temp;	// Temporary variable to hold ticket data while reading.
	readTF = fopen("Ticket.txt", "r");	// Open the ticket file for reading.
	if (readTF == NULL) {	// Check if the file opened successfully.
		printf("Can't open the file Ticket.txt!\n\n");
		exit(-1);
	}
	while (fscanf(readTF, "%[^|]|%[^|]|%02d/%02d/%04d|%02d:%02d|%02d/%02d/%04d|%[^|]|%[^|]|%[^|]|%[^|]|%c|%02d|%d|%lf|%[^\n]\n",
		temp.ticketID, temp.name, &temp.bookDate.day, &temp.bookDate.month, &temp.bookDate.year, &temp.time.hour, &temp.time.min, &temp.departDate.day, &temp.departDate.month, &temp.departDate.year,
		temp.departStation, temp.arrivStation, temp.departTime, temp.estimateTimeArrive, &temp.coach, &temp.seatNo, &temp.departPlatform, &temp.ticPrice, temp.status) != EOF) {		 // Read ticket information from the file until the end of file (EOF) is reached.
		ticket[count] = temp;	// Assign the read ticket data to the corresponding element in the ticket array.
		count++;	// Increment the ticket count.
	}
	fclose(readTF);	// Close the file after reading.

	return count;	// Return the total number of tickets read from the file.
}

int readFnBFile(FNB fnb[]) {
	int count = 0;
	FILE* readFnBF;
	FNB temp;
	readFnBF = fopen("F&B.txt", "r");
	if (readFnBF == NULL) {
		printf("Can't open the file F&B.txt!\n\n");
		exit(-1);
	}
	while (fscanf(readFnBF, "%[^|]|%lf\n", temp.fnbName, &temp.fnbPrice) != EOF) {	// Read fnb information from the file until the end of file (EOF) is reached.
		fnb[count] = temp;	// Assign the read F&B data to the corresponding element in the fnb array.
		count++;
	}
	fclose(readFnBF);
	return count;
}

void displayTrainList(Train trains[]) {
	FILE* list;
	int i = 0;

	if ((list = fopen("train.txt", "r")) == NULL) {
		printf("Error opening the file...\n\n");
		return;
	}

	printf("Train Schedule List\n");
	printf("===================\n\n");
	printf("%-10s | %-20s | %-18s | %-14s | %-16s | %-6s | %-13s | %-16s | %s\n",
		"Train ID",
		"Departure Station",
		"Departure Platform",
		"Departure Time",
		"Arrival Station",
		"ETA",
		"Ticket Price",
		"Available Seats",
		"Train Status");
	printf("-----------------------------------------------------------------------------------------------------------------------------------------------------\n");

	//read data from text file and print out
	while (fscanf(list, "%d#%[^#]#%d#%[^#]#%[^#]#%[^#]#%lf#%d#%[^\n]",
		&trains[i].trainID, trains[i].departureStation, &trains[i].departurePlatform, trains[i].departureTime, trains[i].arrivalStation, trains[i].eta,
		&trains[i].ticketPrice, &trains[i].availableSeats, trains[i].trainStatus) != EOF) {
		printf("%-10d | %-20s | %-18d | %-14s | %-16s | %-6s | %-13.2lf | %-16d | %s\n",
			trains[i].trainID,
			trains[i].departureStation,
			trains[i].departurePlatform,
			trains[i].departureTime,
			trains[i].arrivalStation,
			trains[i].eta,
			trains[i].ticketPrice,
			trains[i].availableSeats,
			trains[i].trainStatus);
		i++;
	}

	fclose(list);
}

void functionsChoosen(TICKET ticket[], int* numOfTicket, FNB fnb[], int* numOfItem, Train trains[], int* numOfTrain) {	// Function to handle various ticket booking operations based on user input. Using parameters to pass value.
	system("cls");
	int choice;

	do {
		printf("============================================\n");
		printf("\t      TICKET BOOKING\n");
		printf("============================================\n\n");
		printf("1. Add Ticket Booking(s)\n");
		printf("2. Search Ticket Booking(s)\n");
		printf("3. Edit Ticket Booking(s)\n");
		printf("4. Cancel Ticket Booking(s)\n");
		printf("5. Display Ticket Booking(s)\n");
		printf("6. Payment\n");
		printf("7. Exit TICKET BOOKING\n\n");
		printf("Please choose from 1-7: ");
		scanf("%d", &choice);
		rewind(stdin);
		switch (choice) {
		case 1: addBooking(ticket, numOfTicket, trains, numOfTrain, fnb, numOfItem); break;
		case 2: searchBooking(ticket, numOfTicket); break;
		case 3: editBooking(ticket, numOfTicket, trains, numOfTrain, fnb, numOfItem); break;
		case 4: deleteBooking(ticket, numOfTicket); break;
		case 5: displayBooking(ticket, numOfTicket); break;
		case 6: paymentFunction(ticket, numOfTicket); break;
		case 7: exitFunction(ticket, numOfTicket); break;
		default: printf("Invalid choice! Please key in again.\n\n");
		};
	} while (choice != 7);	// Continue the loop until the user key in number 8 to exit.
}

void addBooking(TICKET ticket[], int* numOfTicket, Train trains[], int* numOfTrain, FNB fnb[], int* numOfItem) {	// Function to add a booking to the ticket array
	system("cls");
	Train temp;
	int found;
	char confirmAdd, cont, addOn;
	double fnbTotal;
	displayTrainList(trains);	// Display the list of trains
	SYSTEMTIME t; //structure for date, time etc
	printf("\n\n============================================\n");
	printf("\t    Add Ticket Booking\n");
	printf("============================================\n\n");
	do {
		printf("\nEnter Ticket Booking Details: \n");
		printf(" Ticket Holder Name: ");
		scanf("%[^\n]", &ticket[*numOfTicket].name);
		printf(" Deparutre Date: \n");
		printf("\t     dd: ");
		scanf("%d", &ticket[*numOfTicket].departDate.day);
		while (ticket[*numOfTicket].departDate.day <= 0 || ticket[*numOfTicket].departDate.day >= 32) {
			printf("Invalid day! Please enter again.\n");
			printf("\t     dd: ");
			scanf("%d", &ticket[*numOfTicket].departDate.day);
		}
		rewind(stdin);
		printf("\t     mm: ");
		scanf("%d", &ticket[*numOfTicket].departDate.month);
		while (ticket[*numOfTicket].departDate.month <= 0 || ticket[*numOfTicket].departDate.month >= 13) {
			printf("Invalid month! Please enter again.\n");
			printf("\t     mm: ");
			scanf("%d", &ticket[*numOfTicket].departDate.month);
		}
		rewind(stdin);
		printf("\t   yyyy: ");
		scanf("%d", &ticket[*numOfTicket].departDate.year);
		while (ticket[*numOfTicket].departDate.year < 2024 || ticket[*numOfTicket].departDate.year > 2025) {
			printf("Booking only within 2024 - 2025.\n");
			printf("\t     yy: ");
			scanf("%d", &ticket[*numOfTicket].departDate.year);
		}
		rewind(stdin);
		do {
			found = 0;
			printf(" Departure Station: ");
			scanf("%[^\n]", &temp.departureStation);
			rewind(stdin);
			printf(" Arrival Station: ");
			scanf("%[^\n]", &temp.arrivalStation);
			rewind(stdin);
			for (int i = 0; i < *numOfTrain; i++) {	// Check if train exists
				if (strcmp(temp.departureStation, trains[i].departureStation) == 0 && strcmp(temp.arrivalStation, trains[i].arrivalStation) == 0) {
					found = 1;
					strcpy(ticket[*numOfTicket].departStation, temp.departureStation);
					strcpy(ticket[*numOfTicket].arrivStation, temp.arrivalStation);
					strcpy(ticket[*numOfTicket].departTime, trains[i].departureTime);
					strcpy(ticket[*numOfTicket].estimateTimeArrive, trains[i].eta);
					ticket[*numOfTicket].departPlatform = trains[i].departurePlatform;
					ticket[*numOfTicket].ticPrice = trains[i].ticketPrice;
				}
			}
			if (!found)
				printf("Train Not Found! Please Re-enter.\n");
		} while (!found);

		printf(" Coach (A-J): ");
		scanf("%c", &ticket[*numOfTicket].coach);
		ticket[*numOfTicket].coach = toupper(ticket[*numOfTicket].coach);
		while (ticket[*numOfTicket].coach >= 'K') {	// Validate coach
			printf("Invalid Coach! Please enter a Coach between A-J.\n");
			printf(" Coach (A-J): ");
			scanf("%c", &ticket[*numOfTicket].coach);
		}
		rewind(stdin);
		printf(" Seat No (1-30): ");
		scanf("%d", &ticket[*numOfTicket].seatNo);
		while (ticket[*numOfTicket].seatNo <= 0 || ticket[*numOfTicket].seatNo > 30) {	// Validate seat number
			printf("Invalid Seat No! Please enter a Seat No between 1-30.\n");
			printf(" Seat No (1-30): ");
			scanf("%d", &ticket[*numOfTicket].seatNo);
		}
		rewind(stdin);
		do {
			printf(" Add on some food or bevarage? (Y = Yes): ");
			scanf("%c", &addOn);
			rewind(stdin);
			if (toupper(addOn) == 'Y') {
				displayFnBMenu(fnb, numOfItem);	// Display food and beverage menu
				fnbTotal = fnbFunction(fnb, numOfItem);	// Calculate total cost of food and beverage
				ticket[*numOfTicket].ticPrice += fnbTotal;	// Add food and beverage cost to ticket price
				printf(" Add on some food or bevarage? (Y = Yes): ");
				scanf("%c", &addOn);
				rewind(stdin);
			}
		} while (toupper(addOn) == 'Y');

		printf("Confirm to make the booking? (Y = Yes): ");
		scanf("%c", &confirmAdd);
		rewind(stdin);
		if (toupper(confirmAdd) == 'Y') {	// If booking confirmed
			GetLocalTime(&t); //get real date/time from OS
			ticket[*numOfTicket].time.hour = t.wHour;
			ticket[*numOfTicket].time.min = t.wMinute;
			ticket[*numOfTicket].bookDate.day = t.wDay;
			ticket[*numOfTicket].bookDate.month = t.wMonth;
			ticket[*numOfTicket].bookDate.year = t.wYear;

			sprintf(ticket[*numOfTicket].ticketID, "B%04d", (*numOfTicket) + 1);	// Generate booking ID
			strcpy(ticket[*numOfTicket].status, "Pending payment...");	// Set booking status
			printf("\n\n======================================================\n");
			printf("Ticket Summary: \n");
			printf("\n\tBooking ID: \t     %s\n\tTicket Holder Name:  %s\n\tBooking Date: \t     %02d/%02d/%04d\n\tBooking Time: \t     %02d:%02d\n\tDeparture Date:      %02d/%02d/%04d\n\tDeparture Station:   %s\n\tArrival Station:     %s\n\tDeparture Time:      %s\n\tETA: \t\t     %s\n\tCoach: \t\t     %c\n\tSeat No: \t     %02d\n\tDeparture Platform:  %d\n\tTicket Price (RM):   %.2lf\n\tBooking Status:      %s\n",
				ticket[*numOfTicket].ticketID, ticket[*numOfTicket].name, ticket[*numOfTicket].bookDate.day, ticket[*numOfTicket].bookDate.month, ticket[*numOfTicket].bookDate.year, ticket[*numOfTicket].time.hour, ticket[*numOfTicket].time.min,
				ticket[*numOfTicket].departDate.day, ticket[*numOfTicket].departDate.month, ticket[*numOfTicket].departDate.year, ticket[*numOfTicket].departStation, ticket[*numOfTicket].arrivStation,
				ticket[*numOfTicket].departTime, ticket[*numOfTicket].estimateTimeArrive, ticket[*numOfTicket].coach, ticket[*numOfTicket].seatNo, ticket[*numOfTicket].departPlatform, ticket[*numOfTicket].ticPrice, ticket[*numOfTicket].status);
			(*numOfTicket)++;	// Increment number of tickets
			printf("======================================================\n");
		}
		else
			printf("Ticket NOT booked!\n\n");
		printf("\n\nMake another booking? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');

	system("cls");
}

void searchBooking(TICKET ticket[], int* numOfTicket) {	// Function to search for booked tickets based on departure date
	system("cls");
	int i, searchMonth, searchYear, count;
	char cont, found;
	printf("============================================\n");
	printf("\t    Search Ticket Booking\n");
	printf("============================================\n\n");
	do {
		count = 0;	// Initialize counter for tickets found
		found = 0;	// Flag to indicate if any tickets are found
		printf("Search for the Departure Date of ticket(s) in which Month and Year?\n");
		printf("Month: ");
		scanf("%d", &searchMonth);
		while (searchMonth <= 0 || searchMonth >= 13) {	// Validate month
			printf("Invalid month! Please enter again.\n");
			printf("Month: ");
			scanf("%d", &searchMonth);
		}
		rewind(stdin);
		printf("Year:  ");
		scanf("%d", &searchYear);
		while (searchYear < 2024 || searchYear > 2025) {	// Validate year
			printf("Booking only available within 2024 - 2025.\n");
			printf("Year:  ");
			scanf("%d", &searchYear);
		}
		rewind(stdin);
		printf("\n%-10s %-20s %-15s %-15s %-15s %-6s %-8s %-15s %-6s %-8s %-12s %-18s %-15s %-15s\n", "Booking ID", "Ticket Holder Name", "Booking Date", "Booking Time", "Departure Date", "Departure Station", "Arrival Station", "Departure Time", "ETA", "Coach", "Seat No", "Departure Platform", "Ticket Price (RM)", "Booking Status");
		printf("%-10s %-20s %-15s %-15s %-15s %-6s %-8s %-15s %-6s %-8s %-12s %-18s %-15s %-15s\n", "==========", "==================", "============", "============", "==============", "=================", "===============", "==============", "=====", "=====", "=======", "==================", "=================", "===================");
		for (i = 0; i < *numOfTicket; i++) {	// Loop through all booked tickets in the ticket array
			if (searchMonth == ticket[i].departDate.month && searchYear == ticket[i].departDate.year) {
				found = 1;	// Set found flag
				printf("%-10s %-20s %02d/%02d/%04d \t%02d:%02d \t\t%02d/%02d/%04d %14s %18s %15s %10s %4c \t    %02d %18d %20.2lf %23s\n",
					ticket[i].ticketID, ticket[i].name, ticket[i].bookDate.day, ticket[i].bookDate.month, ticket[i].bookDate.year, ticket[i].time.hour, ticket[i].time.min,
					ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year, ticket[i].departStation, ticket[i].arrivStation,
					ticket[i].departTime, ticket[i].estimateTimeArrive, ticket[i].coach, ticket[i].seatNo, ticket[i].departPlatform, ticket[i].ticPrice, ticket[i].status);
				count++;
			}
		}
		if (!found) {
			printf("- -Departure Date NOT Found!- -\n\n");
		}
		printf("\n\t%d ticket(s) booked for %02d/%04d\n\n", count, searchMonth, searchYear);
		printf("Search another Departure Date? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');

	system("cls");
}

void editBooking(TICKET ticket[], int* numOfTicket, Train trains[], int* numOfTrain, FNB fnb[], int* numOfItem) {	// Function to edit a booked ticket
	system("cls");
	int i, editIndex, found;
	char editID[10], confirmUpd, cont, addOn;
	double fnbTotal;
	TICKET temp;	// Temporary ticket structure to store updated details
	Train tempTrain;	// Temporary train structure to store updated details
	printf("============================================\n");
	printf("\t    Edit Ticket Booking\n");
	printf("============================================\n\n");
	do {
		editIndex = -1;	// Initialize index of ticket to edit
		printf("\nEnter Booking ID to edit: ");
		scanf("%s", &editID);
		rewind(stdin);
		i = 0;
		for (int i = 0; i < *numOfTicket; i++) {	// Loop through all booked tickets
			if (strcmp(editID, ticket[i].ticketID) == 0) {	// Check if booking ID matches
				editIndex = i;	// Set index of ticket to edit
				break;
			}
		}
		if (editIndex == -1) {	// If booking ID not found
			printf("\tError: Ticket Booking NOT Found!\n\n");
		}
		else {
			printf("\nRecord Found: \n");	// Display current ticket details
			printf("\n\tBooking ID: \t     %s\n\tTicket Holder Name:  %s\n\tBooking Date: \t     %02d/%02d/%04d\n\tBooking Time: \t     %02d:%02d\n\tDeparture Date:      %02d/%02d/%04d\n\tDeparture Station:   %s\n\tArrival Station:     %s\n\tDeparture Time:      %s\n\tETA: \t\t     %s\n\tCoach: \t\t     %c\n\tSeat No: \t     %02d\n\tDeparture Platform:  %d\n\tTicket Price (RM):   %.2lf\n\tBooking Status:      %s\n",
				ticket[editIndex].ticketID, ticket[editIndex].name, ticket[editIndex].bookDate.day, ticket[editIndex].bookDate.month, ticket[editIndex].bookDate.year, ticket[editIndex].time.hour, ticket[editIndex].time.min,
				ticket[editIndex].departDate.day, ticket[editIndex].departDate.month, ticket[editIndex].departDate.year, ticket[editIndex].departStation, ticket[editIndex].arrivStation,
				ticket[editIndex].departTime, ticket[editIndex].estimateTimeArrive, ticket[editIndex].coach, ticket[editIndex].seatNo, ticket[editIndex].departPlatform, ticket[editIndex].ticPrice, ticket[editIndex].status);

			printf("\n\n");
			displayTrainList(trains);	// Display list of available trains
			printf("\nEnter Updated Details: \n");
			printf(" Ticket ID: %s\n", ticket[editIndex].ticketID);
			printf(" Ticket Holder Name: ");
			scanf("%[^\n]", &temp.name);
			rewind(stdin);
			printf(" Deparutre Date: \n");
			printf("\t     dd: ");
			scanf("%d", &temp.departDate.day);
			while (temp.departDate.day <= 0 || temp.departDate.day >= 32) {
				printf("Invalid day! Please enter again.\n");
				printf("\t     dd: ");
				scanf("%d", &temp.departDate.day);
			}
			rewind(stdin);
			printf("\t     mm: ");
			scanf("%d", &temp.departDate.month);
			while (temp.departDate.month <= 0 || temp.departDate.month >= 13) {
				printf("Invalid month! Please enter again.\n");
				printf("\t     mm: ");
				scanf("%d", &temp.departDate.month);
			}
			rewind(stdin);
			printf("\t   yyyy: ");
			scanf("%d", &temp.departDate.year);
			while (temp.departDate.year < 2024 || temp.departDate.year > 2025) {
				printf("Booking only available within 2024 - 2025.\n");
				printf("\t     yy: ");
				scanf("%d", &temp.departDate.year);
			}
			rewind(stdin);
			do {
				found = 0;
				printf(" Departure Station: ");
				scanf("%[^\n]", &tempTrain.departureStation);
				rewind(stdin);
				printf(" Arrival Station: ");
				scanf("%[^\n]", &tempTrain.arrivalStation);
				rewind(stdin);
				for (int j = 0; j < *numOfTrain; j++) {	// Loop through all available trains
					if (strcmp(tempTrain.departureStation, trains[j].departureStation) == 0 && strcmp(tempTrain.arrivalStation, trains[j].arrivalStation) == 0) {	// Check if departure and arrival stations match
						found = 1; // Set found flag
						// Update ticket details with train details
						strcpy(temp.departStation, tempTrain.departureStation);
						strcpy(temp.arrivStation, tempTrain.arrivalStation);
						strcpy(temp.departTime, trains[j].departureTime);
						strcpy(temp.estimateTimeArrive, trains[j].eta);
						temp.departPlatform = trains[j].departurePlatform;
						temp.ticPrice = trains[j].ticketPrice;
					}
				}
				if (!found)
					printf("Train Not Found! Please Re-enter.\n");
			} while (!found);

			printf(" Coach (A-J): ");
			scanf("%c", &temp.coach);
			temp.coach = toupper(temp.coach);
			while (temp.coach >= 'K') {
				printf("Invalid Coach! Please enter a Coach between A-J.\n");
				printf(" Coach (A-J): ");
				scanf("%c", &temp.coach);
			}
			rewind(stdin);
			printf(" Seat No (1-30): ");
			scanf("%d", &temp.seatNo);
			if (temp.seatNo <= 0 || temp.seatNo > 31) {
				printf("Invalid Seat No! Please enter between 1-30.\n");
				printf(" Seat No (1-30): ");
				scanf("%d", &temp.seatNo);
			}
			rewind(stdin);
			do {
				printf(" Add on some food or bevarage? (Y = Yes): ");
				scanf("%c", &addOn);
				rewind(stdin);
				if (toupper(addOn) == 'Y') {
					displayFnBMenu(fnb, numOfItem);
					fnbTotal = fnbFunction(fnb, numOfItem);
					temp.ticPrice += fnbTotal;
					printf(" Add on some food or bevarage? (Y = Yes): ");
					scanf("%c", &addOn);
					rewind(stdin);
				}
			} while (toupper(addOn) == 'Y');

			printf("Confirm to update? (Y = Yes): ");
			scanf("%c", &confirmUpd);
			rewind(stdin);

			if (toupper(confirmUpd) == 'Y') {
				strcpy(temp.ticketID, editID);
				temp.bookDate.day = ticket[editIndex].bookDate.day;	// Keep original booking date
				temp.bookDate.month = ticket[editIndex].bookDate.month;
				temp.bookDate.year = ticket[editIndex].bookDate.year;
				temp.time.hour = ticket[editIndex].time.hour;	// Keep original booking time
				temp.time.min = ticket[editIndex].time.min;
				strcpy(temp.status, ticket[editIndex].status);	// Keep original booking status
				// Update ticket with new details
				strcpy(ticket[editIndex].departStation, temp.departStation);
				strcpy(ticket[editIndex].arrivStation, temp.arrivStation);
				strcpy(ticket[editIndex].departTime, temp.estimateTimeArrive);
				ticket[editIndex].departPlatform = temp.departPlatform;
				ticket[editIndex].ticPrice = temp.ticPrice;
				ticket[editIndex] = temp;	// Assign updated ticket to original ticket array
				printf("Update Successfully!\n\n");
			}
			else
				printf("\nNo changes made.\n\n");

			printf("\nCurrent Record Details: \n");	// Display updated ticket details
			printf("\n\tBooking ID: \t     %s\n\tTicket Holder Name:  %s\n\tBooking Date: \t     %02d/%02d/%04d\n\tBooking Time: \t     %02d:%02d\n\tDeparture Date:      %02d/%02d/%04d\n\tDeparture Station:   %s\n\tArrival Station:     %s\n\tDeparture Time:      %s\n\tETA: \t\t     %s\n\tCoach: \t\t     %c\n\tSeat No: \t     %02d\n\tDeparture Platform:  %d\n\tTicket Price (RM):   %.2lf\n\tBooking Status:      %s\n",
				ticket[editIndex].ticketID, ticket[editIndex].name, ticket[editIndex].bookDate.day, ticket[editIndex].bookDate.month, ticket[editIndex].bookDate.year, ticket[editIndex].time.hour, ticket[editIndex].time.min,
				ticket[editIndex].departDate.day, ticket[editIndex].departDate.month, ticket[editIndex].departDate.year, ticket[editIndex].departStation, ticket[editIndex].arrivStation,
				ticket[editIndex].departTime, ticket[editIndex].estimateTimeArrive, ticket[editIndex].coach, ticket[editIndex].seatNo, ticket[editIndex].departPlatform, ticket[editIndex].ticPrice, ticket[editIndex].status);
		}
		printf("\nEdit another ticket booking? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
		printf("-----------------------------------------------------------------------------------------------------------------------------------------------------\n");
	} while (toupper(cont) == 'Y');

	system("cls");
}

void displayBooking(TICKET ticket[], int* numOfTicket) {	// Function to display ticket bookings by ticket holder name
	system("cls");
	char displayName[30];
	int found;
	char cont;
	printf("============================================\n");
	printf("\t    Display Ticket Booking\n");
	printf("============================================\n\n");
	do {
		found = 0;	// Initialize found flag
		printf("Enter Ticket Holder Name to display: ");
		scanf("%[^\n]", displayName);
		rewind(stdin);
		for (int i = 0; i < *numOfTicket; i++) {	// Loop through all booked tickets
			if (strcmp(displayName, ticket[i].name) == 0) {	// Check if ticket holder name matches
				found = 1;	// Set found flag
				// Display ticket details for the matching ticket holder name
				printf("\n\tBooking ID: \t     %s\n\tTicket Holder Name:  %s\n\tBooking Date: \t     %02d/%02d/%04d\n\tBooking Time: \t     %02d:%02d\n\tDeparture Date:      %02d/%02d/%04d\n\tDeparture Station:   %s\n\tArrival Station:     %s\n\tDeparture Time:      %s\n\tETA: \t\t     %s\n\tCoach: \t\t     %c\n\tSeat No: \t     %02d\n\tDeparture Platform:  %d\n\tTicket Price (RM):   %.2lf\n\tBooking Status:      %s\n",
					ticket[i].ticketID, ticket[i].name, ticket[i].bookDate.day, ticket[i].bookDate.month, ticket[i].bookDate.year, ticket[i].time.hour, ticket[i].time.min,
					ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year, ticket[i].departStation, ticket[i].arrivStation,
					ticket[i].departTime, ticket[i].estimateTimeArrive, ticket[i].coach, ticket[i].seatNo, ticket[i].departPlatform, ticket[i].ticPrice, ticket[i].status);
			}
		}
		if (!found) {
			printf("- -Booking Name NOT Found!- -\n\n");
		}
		printf("\nDisplay another? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');

	system("cls");
}

void deleteBooking(TICKET ticket[], int* numOfTicket) {	// Function to delete a ticket booking
	system("cls");
	char deleteID[10], cont, confirmDlt;
	int found = 0;	// Flag to indicate if booking ID is found
	printf("============================================\n");
	printf("\t    Cancel Ticket Booking\n");
	printf("============================================\n\n");
	do {
		printf("Enter the Booking ID to cancel the booking: ");
		scanf("%s", &deleteID);
		rewind(stdin);
		for (int i = 0; i < *numOfTicket; i++) {	// Loop through all booked tickets
			if (strcmp(deleteID, ticket[i].ticketID) == 0) {	// Check if booking ID matches
				// Display ticket details of the found booking
				printf("\nBooking found:\n");
				printf("\n\tBooking ID: \t     %s", ticket[i].ticketID);
				printf("\n\tTicket Holder Name:  %s", ticket[i].name);
				printf("\n\tDeparture Date:      %02d/%02d/%04d", ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year);
				printf("\n\tDeparture Station:   %s", ticket[i].departStation);
				printf("\n\tArrival Station:     %s", ticket[i].arrivStation);
				printf("\n\tDeparture Time : % s", ticket[i].departTime);
				printf("\n\tETA: \t\t% s", ticket[i].estimateTimeArrive);
				printf("\n\tCoach: \t\t     %c", ticket[i].coach);
				printf("\n\tSeat No: \t     %d", ticket[i].seatNo);
				printf("\n\tDeparture Platform : % d", ticket[i].departPlatform);
				printf("\n\tTicket Price(RM) : % .2lf", ticket[i].ticPrice);
				printf("\n\tBooking Status : % s", ticket[i].status);
				printf("\n\nConfirm deletion of this ticket? (Y = Yes): ");
				scanf("%c", &confirmDlt);
				rewind(stdin);
				if (toupper(confirmDlt) == 'Y') {
					(*numOfTicket)--;	// Decrement number of tickets
					found = 1;	// Set found flag
					printf("Ticket with ID %s deleted successfully.\n", deleteID);
				}
				else {
					found = 1;	// Set found flag
					printf("Deletion canceled.\n");
				}
			}
		}
		if (!found) {
			printf("\nTicket with ID %s not found.\n", deleteID);
		}

		printf("\nDelete another Ticket Booking? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');

	system("cls");
}

void displayFnBMenu(FNB fnb[], int* numOfItem) {	// Function to display the Food and Beverage (F&B) menu
	printf("============================================\n");
	printf("\t      F&B MENU\n");
	printf("============================================\n\n");
	for (int i = 0; i < *numOfItem; i++) {	// Loop through each F&B item in the menu
		printf("%d. %s - RM%.2lf\n", i + 1, fnb[i].fnbName, fnb[i].fnbPrice);	// Print the item number, name, and price in the specified format
	}
}

double fnbFunction(FNB fnb[], int* numOfItem) {	// Function to process food and beverage (F&B) orders and calculate total price
	int choice, quantity;
	double fnbTotal = 0.0;
	
	printf("\nPlease enter the item number you'd like to order (1-6): "); //Ask for user's choice
	scanf("%d", &choice);
	rewind(stdin);
	if (choice < 1 || choice > *numOfItem) {
		printf("Invalid choice!\n");
		return;
	}
	printf("Enter the quantity: ");  //Ask for the quantity
	scanf("%d", &quantity);
	rewind(stdin);
	if (quantity <= 0) {
		printf("Invalid quantity!\n");
		return;
	}
	fnbTotal = fnb[choice - 1].fnbPrice * quantity;  //Calculate total price

	printf("\nOrder Summary:\n");  //Display order summary
	printf("%d x %s - RM%.2lf\n", quantity, fnb[choice - 1].fnbName, fnbTotal);
	printf("Total amount: RM%.2lf\n\n", fnbTotal);

	return fnbTotal;
}

void paymentFunction(TICKET ticket[], int* numOfTicket) {	// Function to handle payment for ticket bookings
	system("cls");
	TICKET temp;	// Temporary variable to store ticket information
	int paid, creditCard, onlineBanking, found;
	char cont;
	printf("============================================\n");
	printf("\t\t  Payment\n");
	printf("============================================\n\n");
	do {
		found = 0;
		printf("Please enter your Booking ID: ");
		scanf("%s", &temp.ticketID);
		rewind(stdin);
		for (int i = 0; i < *numOfTicket; i++) {	// Loop through the ticket array to find the matching Booking ID
			if (strcmp(temp.ticketID, ticket[i].ticketID) == 0) {
				found = 1;	// Ticket found
				 // Display Booking ID and total amount
				printf("Booking ID: %s\n", ticket[i].ticketID);
				printf("Total Amount: RM%.2lf\n", ticket[i].ticPrice);
				// Prompt user to choose payment method
				printf("Pay by  1. Credit Card\n\t2. Online Banking\n> ");
				scanf("%d", &paid);
				switch (paid) {
				case 1: 
					printf("Please enter the Total Amount (RM): ");
					scanf("%lf", &temp.ticPrice);
					rewind(stdin);
					if (temp.ticPrice == ticket[i].ticPrice) {	// Verify total amount matches
						printf("Please enter your Credit Card No: ");
						scanf("%d", &creditCard);
						rewind(stdin);
						printf("Payment successfully! Your ticket has been Booked!\n\n");
						strcpy(ticket[i].status, "Booked");	// After finished payment, update ticket status to "Booked"
					}
					else {
						printf("Total Amount Not Match! Please try again.\n");
						return;	// Exit function if total amount does not match
					}
					break;
				case 2:
					printf("Please enter the Total Amount (RM): ");
					scanf("%lf", &temp.ticPrice);
					rewind(stdin);
					if (temp.ticPrice == ticket[i].ticPrice) {
						printf("Please enter your Account No: ");
						scanf("%d", &onlineBanking);
						rewind(stdin);
						printf("Payment successfully! Your ticket has been Booked!\n\n");
						strcpy(ticket[i].status, "Booked");	// After finished payment, update ticket status to "Booked"
					}
					else {
						printf("Total Amount Not Match! Please try again.\n");
						return;	// Exit function if total amount does not match
					}
					break;
				default:
					printf("Invalid choice! Please try again!\n");
				}
			}
		}
		if (!found)
			printf("Booking ID %s Not found! Please try again.\n\n", temp.ticketID);

		printf("\nMake another Booking payment? (Y = Yes): ");
		scanf("%c", &cont);
		rewind(stdin);
	} while (toupper(cont) == 'Y');
	system("cls");
}

void displayAllTicket(TICKET ticket[], int* numOfTicket) {	// Function to display all ticket booking records
	system("cls");
	int i, count = 0;
	printf("============================================\n");
	printf("\t    Display ALL Ticket Booking\n");
	printf("============================================\n\n");
	printf("\n%-10s %-20s %-15s %-15s %-15s %-6s %-8s %-15s %-6s %-8s %-12s %-18s %-15s %-15s\n", "Booking ID", "Ticket Holder Name", "Booking Date", "Booking Time", "Departure Date", "Departure Station", "Arrival Station", "Departure Time", "ETA", "Coach", "Seat No", "Departure Platform", "Ticket Price (RM)", "Booking Status");
	printf("%-10s %-20s %-15s %-15s %-15s %-6s %-8s %-15s %-6s %-8s %-12s %-18s %-15s %-15s\n", "==========", "==================", "============", "============", "==============", "=================", "===============", "==============", "=====", "=====", "=======", "==================", "=================", "===================");
	for (i = 0; i < *numOfTicket; i++) {	 // Loop through ticket array and display each ticket booking record
		printf("%-10s %-20s %02d/%02d/%04d \t%02d:%02d \t\t%02d/%02d/%04d %14s %18s %15s %10s %4c \t    %02d %18d %20.2lf %23s\n",
			ticket[i].ticketID, ticket[i].name, ticket[i].bookDate.day, ticket[i].bookDate.month, ticket[i].bookDate.year, ticket[i].time.hour, ticket[i].time.min,
			ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year, ticket[i].departStation, ticket[i].arrivStation,
			ticket[i].departTime, ticket[i].estimateTimeArrive, ticket[i].coach, ticket[i].seatNo, ticket[i].departPlatform, ticket[i].ticPrice, ticket[i].status);
		count++;	// Increment the counter for each ticket displayed
	}
	printf("\n\t%d ticket booking records listed.\n\n", count);	 // Display total number of ticket booking records
}

void exitFunction(TICKET ticket[], int* numOfTicket) {	// Function to handle program exit and write the ticket details into the Ticket text file
	system("cls");
	FILE* ticketFile;	// File pointer for ticket file
	ticketFile = fopen("Ticket.txt", "w");	 // Open the Ticket.txt file for writing
	if (ticketFile == NULL) {	// Check if file opening is successful
		printf("Can't open the file Ticket.txt!\n");
		exit(-1);
	}
	for (int i = 0; i < *numOfTicket; i++) {	// Loop through ticket array and write ticket details to file
		fprintf(ticketFile, "%s|%s|%02d/%02d/%04d|%02d:%02d|%02d/%02d/%04d|%s|%s|%s|%s|%c|%02d|%d|%.2lf|%s\n",
			ticket[i].ticketID, ticket[i].name, ticket[i].bookDate.day, ticket[i].bookDate.month, ticket[i].bookDate.year, ticket[i].time.hour, ticket[i].time.min, ticket[i].departDate.day, ticket[i].departDate.month, ticket[i].departDate.year,
			ticket[i].departStation, ticket[i].arrivStation, ticket[i].departTime, ticket[i].estimateTimeArrive, ticket[i].coach, ticket[i].seatNo, ticket[i].departPlatform, ticket[i].ticPrice, ticket[i].status);
	}
	fclose(ticketFile);	// Close the file
	// Display exit message
	printf("======================================================\n");
	printf("Thank You for using TICKET BOOKING. See you next time!\n");
	printf("======================================================\n");
	exit(-1);
}
